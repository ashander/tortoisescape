#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;


## This script takes as input the read support files generated by ANGSD's -docounts 1 -dumpCounts 4.
## It outputs a random subset of 100bp chunks of these reads. The user sets a percentage of starting
## positions wanted (--keep). For instance, if the user supplies the argument "--keep 0.00005", then
## approximately every 20,000 bp a start site will be selected and the next 100 lines will be dumped
## to the output file. With a 2 gigabase genome this would yield roughly (2000000000/20000)*100=10millionbp.
## --keep 0.000005 would yield roughly 1 million bp.

my $help = 0;
my $inFile;
my $outFile;
my $keepFraction;

GetOptions  ("in=s"       => \$inFile,
             "out=s"      => \$outFile,
             "keep=f"     => \$keepFraction,
             "help|man"   => \$help) || die "Couldn't get options with GetOpt::Long: $!\n";

if (!$inFile or !$outFile or !$keepFraction or $help) {
    die "Must supply --in and --out and --keep.\n";
}

open(my $inFH, "<", $inFile) or die "Couldn't open $inFile for reading: $!\n";
open(my $outFH, ">", $outFile) or die "Couldn't open $outFile for writing: $!\n";

my $counter = 0;
while (my $line = <$inFH>) {
    if ($counter != 0) {
        print $outFH $line;
        $counter++;
        if ($counter == 100) {
            $counter = 0;       # These lines just check to see if we've reached the 100 bp that we want to dump yet
        }
    } elsif (rand() < $keepFraction) {  # We only reach this point if the $counter is 0
        print $outFH $line;
        $counter++;
    }
    # If the $counter is 0 and the random number generated is not less than the $keepFraction, then that line
    # is skipped (this will happen for most lines)
}


